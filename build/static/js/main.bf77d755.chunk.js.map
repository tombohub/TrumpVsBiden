{"version":3,"sources":["images/biden.png","images/trump.png","logo.svg","components/Biden.jsx","components/Trump.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["module","exports","Biden","props","className","src","bidenImage","alt","Trump","trumpImage","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0GAAAA,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,wECA3CD,EAAOC,QAAU,IAA0B,kC,iICa5BC,MAVf,SAAeC,GACb,OACE,yBAAKC,UAAU,mCACb,wBAAIA,UAAU,QAAd,SACA,yBAAKA,UAAU,OAAOC,IAAKC,IAAYC,IAAI,KAC3C,wBAAIH,UAAU,QAAd,S,gBCKSI,MAVf,SAAeL,GACb,OACE,yBAAKC,UAAU,kCACb,wBAAIA,UAAU,QAAd,SACA,yBAAKA,UAAU,OAAOC,IAAKI,IAAYF,IAAI,KAC3C,wBAAIH,UAAU,QAAd,SCgBSM,MAjBf,SAAaP,GACX,OACE,yBAAKC,UAAU,mCACb,yBAAKA,UAAU,wBACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,gFACb,mCAEF,yBAAKA,UAAU,mFACb,mCAEF,kBAAC,EAAD,SCNYO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,iBCVNC,IAASC,OACPA,iBACE,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,UDsHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.bf77d755.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/biden.f545efb1.png\";","module.exports = __webpack_public_path__ + \"static/media/trump.64281307.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState } from \"react\";\nimport bidenImage from \"../images/biden.png\";\n\nfunction Biden(props) {\n  return (\n    <div className=\"col-sm-5 text-center bg-primary\">\n      <h1 className=\"mt-3\">Biden</h1>\n      <img className=\"head\" src={bidenImage} alt=\"\" />\n      <h1 className=\"mt-3\">233</h1>\n    </div>\n  );\n}\n\nexport default Biden;\n","import React, { useState } from \"react\";\nimport trumpImage from \"../images/trump.png\";\n\nfunction Trump(props) {\n  return (\n    <div className=\"col-sm-5 text-center bg-danger\">\n      <h1 className=\"mt-3\">Trump</h1>\n      <img className=\"head\" src={trumpImage} alt=\"\" />\n      <h1 className=\"mt-3\">119</h1>\n    </div>\n  );\n}\n\nexport default Trump;\n","import React, { useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Biden from \"./components/Biden\";\nimport Trump from \"./components/Trump\";\nimport Vs from \"./components/VS\";\n\nfunction App(props) {\n  return (\n    <div className=\"container-fluid h-100 w-100 p-0\">\n      <div className=\"row h-100 no-gutters\">\n        <Trump />\n        <div className=\"col-sm-1 bg-danger d-flex flex-column justify-content-center align-items-end\">\n          <h1>V.</h1>\n        </div>\n        <div className=\"col-sm-1 bg-primary d-flex flex-column justify-content-center align-items-start\">\n          <h1>S.</h1>\n        </div>\n        <Biden />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport { render } from \"react-snapshot\";\n\nReactDOM.render(\n  render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n  )\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}